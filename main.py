import logging
import os
import random
import sqlite3
import threading
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils import admin, reports, db_utils as utils, lessons_handler

wants_subscribe = False
extend = False

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)
bot.remove_webhook()

admin.register_handlers(bot)
lessons_handler.register_handlers(bot)
reports.register_handlers(bot)
utils.init_db()

def check_expired_subscriptions():
    while True:
        conn = sqlite3.connect('utils/databases/users.db')
        c = conn.cursor()
        now = datetime.now()
        three_days_later = (now + timedelta(days=3)).date()
        one_day_later = (now + timedelta(days=1)).date()
        c.execute("SELECT user_id FROM subscribers WHERE DATE(expiry_date) = ?", (three_days_later,))
        three_day_users = c.fetchall()
        for user in three_day_users:
            bot.send_message(user[0],
                             '–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ö”©–º–µ–∫–ë–∞–π! üìÖ –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è. ‚è≥ –ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É: "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" ‚úâÔ∏è')

        c.execute("SELECT user_id FROM subscribers WHERE DATE(expiry_date) = ?", (one_day_later,))
        one_day_users = c.fetchall()
        for user in one_day_users:
            bot.send_message(user[0],
                             '–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ö”©–º–µ–∫–ë–∞–π! üìÖ –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞! ‚è≥ –ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É: "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" ‚úâÔ∏è')

        c.execute("SELECT user_id FROM subscribers WHERE expiry_date < ?", (now.isoformat(),))
        expired_users = c.fetchall()

        if expired_users:
            for user in expired_users:
                logger.info(f"Expired subscription removed for user ID: {user[0]}")
                bot.send_message(user[0],
                                 '–î–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ö”©–º–µ–∫–ë–∞–π! üìÖ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫. üòî –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É')

            admin.move_expired_users()
        else:
            logger.info(f"No expired subscriptions were found")

        conn.close()
        admin.move_old_expired_users()
        time.sleep(600)

def create_grade_inline_keyboard(user_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("1 –ö–ª–∞—Å—Å", callback_data="grade1"))
    keyboard.add(InlineKeyboardButton("2 –ö–ª–∞—Å—Å", callback_data="grade2"))
    keyboard.add(InlineKeyboardButton("3 –ö–ª–∞—Å—Å", callback_data="grade3"))
    keyboard.add(InlineKeyboardButton("4 –ö–ª–∞—Å—Å", callback_data="grade4"))
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç üëã")
    bot.send_message(message.chat.id, f"–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?", reply_markup=create_grade_inline_keyboard(message.chat.id))


@bot.message_handler(func=lambda message: "–ø–æ—á–µ–º—É" in message.text.lower())
def why(message):
    bot.send_message(message.chat.id, f"–ü–æ—Ç–æ–º—É")


@bot.message_handler(func=lambda message: "—Ç—É–ø–æ–π" in message.text.lower())
def smartbot(message):
    bot.send_message(message.chat.id, f"–Ø —É–º–Ω—ã–π ")


words = {
    "–ø—Ä–∏–≤–µ—Ç", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–ø–æ–º–æ–≥–∏", "—Å–∞–ª–µ–º", "—Å”ô–ª–µ–º", "—Å”ô–ª–µ–º–µ—Ç—Å—ñ–∑",
    "–¥–æ–º–∞—à–Ω–µ–µ", "–∑–∞–¥–∞–Ω–∏–µ", "–¥–∑", "—Ä–∞–±–æ—Ç–∞", "–¥–æ–º–∞—à–∫—É", "—Å–¥–µ–ª–∞—Ç—å", "–¥–æ–º–∞—à–∫–∞",
    "–º–µ–Ω—é", "—Å—Ç–∞—Ä—Ç", "–Ω–∞–∑–∞–¥", "–Ω–∞—á–∞–ª–æ", "–∫–ª–∞—Å—Å", "–≤—ã–±—Ä–∞—Ç—å"
}

@bot.message_handler(func=lambda message: any(word in message.text.lower() for word in words))
def hello(message):
    username = message.chat.first_name or message.chat.from_user.username or "–¥—Ä—É–≥"
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {username}! üëã")
    bot.send_message(message.chat.id, f"–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?", reply_markup=create_grade_inline_keyboard(message.chat.id))

@bot.message_handler(commands=['get_id'])
def get_user_id(message):
    user_id = message.chat.id
    bot.send_message(message.chat.id, f"–í–∞—à ID: {user_id}")

@bot.callback_query_handler(
    func=lambda call: call.data.startswith("grade") and "_chapter_" not in call.data and "_lesson_" not in call.data)
def handle_grade_selection(call):
    grade_number = ''.join(filter(str.isdigit, call.data))
    logger.info(f"Grade selected: {grade_number}")

    if grade_number in ['2', '3', '4']:
        if not (utils.is_subscriber(call.message.chat.id) or utils.is_admin(call.message.chat.id)):
            bot.send_message(call.message.chat.id,
                             f"–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {grade_number} –∫–ª–∞—Å—Å–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É "
                             "—Å–ª–æ–≤–æ '–ü–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –æ–ø–ª–∞—Ç—ã ‚úâÔ∏è")
            return

    try:
        lessons_handler.menu(call, bot, grade_number)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['lessons'])
def settings(message):
    if utils.is_admin(message.chat.id):
        try:
            parts = message.text.split()
            if len(parts) < 2:
                bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lessons <–Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞>")
                return
            grade_num = parts[1]
            if grade_num not in ['1', '2', '3', '4']:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –æ—Ç 1 –¥–æ 4.")
                return
            admin.show_settings(bot, message, grade_num)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /lessons: {e}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")


@bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–¥–ø–∏—Å–∫–∞")
def handle_subscription_request(message):
    user_id = message.chat.id
    markup = InlineKeyboardMarkup()
    subscribe_button = InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É üì≤", callback_data="subscribe")
    markup.add(subscribe_button)
    bot.send_message(user_id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è 30-–¥–Ω–µ–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –æ–ø–ª–∞—Ç–∏—Ç–µ *4990‚Ç∏* —á–µ—Ä–µ–∑ Kaspi.kz",
                     parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.lower() == "–ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
def handle_extension_request(message):
    user_id = message.chat.id
    markup = InlineKeyboardMarkup()
    subscribe_button = InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É üì≤", callback_data="extend")
    markup.add(subscribe_button)
    bot.send_message(user_id,
                     "–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ö”©–º–µ–∫–ë–∞–π! üòä –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è 30-–¥–Ω–µ–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –æ–ø–ª–∞—Ç–∏—Ç–µ *4990‚Ç∏* —á–µ—Ä–µ–∑ Kaspi.kz",
                     parse_mode='Markdown', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'subscribe')
def callback_subscription(call):
    global wants_subscribe
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —á–∞—Ç üìû", parse_mode='Markdown')
    wants_subscribe = True


@bot.callback_query_handler(func=lambda call: call.data == 'extend')
def callback_extension(call):
    global wants_subscribe
    markup = InlineKeyboardMarkup()
    month = InlineKeyboardButton("1 –º–µ—Å—è—Ü üóìÔ∏è", callback_data="m1")
    three_months = InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ üìÜ", callback_data="m3")
    half_a_year = InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ üïë", callback_data="m6")
    markup.add(month, three_months, half_a_year)
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? üïí", reply_markup=markup,
                     parse_mode='Markdown')
    wants_subscribe = True


# Handler function to print the selected period
@bot.callback_query_handler(func=lambda call: call.data in ['m1', 'm3', 'm6'])
def handle_subscription_period(call):
    global extend
    periods = {
        'm1': 1,
        'm3': 3,
        'm6': 6
    }

    # Print the selected period
    selected_period = periods[call.data]
    bot.answer_callback_query(call.id)
    extend = True
    finalize_subscription(call.message.chat.id, period=selected_period)


@bot.message_handler(func=lambda message: True)
def handle_text_message(message):
    if wants_subscribe:
        if message.text.startswith('+') or message.text[0].isdigit():
            global extend
            phone_number = message.text
            extend = False
            finalize_subscription(message.chat.id, phone_number)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", parse_mode='Markdown')
    else:
        unknown_command_responses = {
            1: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª.",
            2: "–û–π, –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è.",
            3: "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É.",
            4: "–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            5: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            6: '–í–≤–µ–¥–∏ "–ú–µ–Ω—é" –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤',
            7: "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
            8: "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –Ω–µ –ø–æ–Ω—è–ª, –æ —á–µ–º –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ.",
            9: "–£–ø—Å, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ.",
            10: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å."
        }
        bot.send_message(message.chat.id, unknown_command_responses[random.randint(1, 10)], parse_mode='Markdown')


def finalize_subscription(chat_id, phone_number=None, period=None):
    global wants_subscribe
    global extend
    if not extend:
        bot.send_message(chat_id, f"–û–ø–ª–∞—Ç–∏—Ç–µ *4990‚Ç∏* –ø–æ –Ω–æ–º–µ—Ä—É:\n+7 701 234 5678", parse_mode='Markdown')
        bot.send_message(chat_id, f"–ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –≤–∞–º, –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ üòä")
    else:
        bot.send_message(chat_id, f"–û–ø–ª–∞—Ç–∏—Ç–µ *{4990 * period}‚Ç∏* –ø–æ –Ω–æ–º–µ—Ä—É:\n+7 701 234 5678", parse_mode='Markdown')
        bot.send_message(chat_id, f"–ë–æ—Ç —Å–æ–æ–±—â–∏—Ç –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ üòä")
    wants_subscribe = False
    conn = sqlite3.connect('utils/databases/users.db')
    c = conn.cursor()
    c.execute("SELECT tg_id FROM admins")
    admins = c.fetchall()
    print(admins)
    conn.close()
    for admin in admins:
        admin_id = admin[0]
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: <b>{chat_id}</b>, —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_number} –∂–µ–ª–∞–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É." if not extend else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: <b>{chat_id}</b>, –∂–µ–ª–∞–µ—Ç –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period} –º–µ—Å—è—Ü(–µ–≤).\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '<i>/extend_sub user_id</i>' –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"
        bot.send_message(admin_id, text,
                         parse_mode="HTML")

@bot.message_handler(commands=['subscribe'])
def subscribe_command(message):
    handle_subscription_request(message)

threading.Thread(target=check_expired_subscriptions, daemon=True).start()

if __name__ == '__main__':
    logger.info("Bot started")
    bot.infinity_polling()
